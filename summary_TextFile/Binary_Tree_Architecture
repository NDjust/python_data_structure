binary tree methods

size() - 현재 트리에 포함되어 있는 노드의 수
depth() - 현재 트리의 깊이 
traversal - 

node 
- data
- left child
- right child

binary tree
- recursive - terminal의 조건을 잘 구해야함
self.root = r

전체 이진 트리의 
size()
= left subtree의 size() + right subtree 의 size() + 1

depth()
- left subtree의 depth와 right subtree의 depth중 큰 depth의 + 1

in-order Traversl 
1) left subtree
2) self
3) right subtree

pre-order traversal
1) self
2) left subtree
3) right subtree

post-order traversal
1) left subtree
2) right subtree
3) self


breadth first traversal
- level 이 낮은 노드를 우선으로 방문
- 같은 수준의 노드들 사이에는
 >부모 노드의 방문 순서에 따라 방문
 > 왼쪽 자식 노드를 오른쪽 자식보다 먼저 방문
 
- recursive 부적합.

- 한 노드를 방문했을 때,
	> 나중에 방문할 노드들을 순서대로 기록해두어야 한다.
	> queue 활용!
	
설계
- queue 활용.

1. 초기화 traversal <- empty list q <- empty queue
2. 빈 트리가 아니면, root node를 q에 추가
3. q가 비어 있지 않으면 동안
	3.1 node <- q 에서 원소를 추출
	3.2 node를 방문
	3.3 node의 왼쪽, 오른쪽 자식(있으면) 들을 q에 추가
4. q가 빈 큐가 되면 모든 노드 방문 완료.


이진 탐색 트리

모든 노드에 대해서
	 > 왼쪽 서브트리에 있는 데이터는 모두 현재 노드의 값보다 작고
	 > 오른쪽 서브트리에 있는 데이터는 모두 현재 노드의 값보보다 큰
	 성질을 만족하는 이진 트리.
	 (중복 데이터 원소는 없다고 가정
	
배열 이진 탐색과 이진 탐색 트리 비교 
- 장점 : 추가, 삭제가 용이.
- 단점 : 공간 소요가 크다. (왼쪽 오른쪽 모두 기록해야 하기 때문에)
- O(log n)의 탐색 복잡도?

data expression
key - value 
node - data

키를 이용해서 검색 가능 - 보다 복잡한 데이터 레코드로 확장 가능.

insert(key, data): 트리에 주어진 데이터 원소를 추가
remove(key): 특정 원소를 트리로부터 삭제
lookup(key): 특정 원소를 검색 (탐색) return 찾은 노드와 , 그것의 부모 노드 (각각 없으면 None)
inorder(): 키의 순서대로 데이터 원소들을 나열
min(), max(): 최소 키, 최대 키를 가지는 원소를 각각 탐색

이진 탐색 트리에서 원소 삭제
1. 키를 이용해서 노드를 찾는다
	> 해당 키의 노드가 없으면, 삭제할 것도 없음
	> 찾은 노드의 부모 노드도 알고 있어야 함.(2번 때문)
	
2. 찾은 노드를 제거하고도 이진 탐색 트리 성질을 만족하도록 트리의 구조를 정리한다.

interface 설계
입력 : eky
출력 : 삭제한 경우 True, 해당 노드가 없는 경우 False

삭제되는 노드가 
1. 밑단 노드인 경우
그냥 노드를 없애면 된다. - > 부모 노드의 링크 조정(좌? 우?)
삭제되는 노드가 root 노드인 경우에는 트리가 없어진다.
2. 자식을 하나 가지고 있는 경우
자식이 왼쪽 ? 오른쪽? - > 부모 노드의 링크를 조정(좌? 우?)
3. 자식을 둘 가지고 있는 경우.
삭제되는 노드보다 바로 다음 키를 가지는 노드를 찾아 그 노드를 삭제되는 노드 자리에 대신 배치하고 이 노드를 대신 삭제.

이진 탐색 트리가 별로 효율적이지 못한 경우.
높이의 균형이 맞지 않을 경우 (왼쪽으로만 치우쳐 있는 경우 , 오른쪽으로만 치우쳐 있는 경우)
높이의 균형을 유지함으로써 O(log n)의 탐색 복잡도 보장
삽입, 삭제 연산이 보다 복잡.
AVL-tree
Red-black-tree