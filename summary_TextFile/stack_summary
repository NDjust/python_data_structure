Stack Abstrucutre data structure

method
1. size()
2. isEmpty()
3. push()
4. pop()
5. peek()-스택의 맨위에 저장된 원소 파악 및 리턴

1) Array을 이용해 구현
- python list & method

2) LinkedList를 이용해서 구현


연습 문제 - 수식 괄호 검사 (),{}, [] - hint : dictionary 사용.


Stack으로 해결할 수 있는 문제
1) 중위 표기법(infix notation)
- 연산자가 피연산자들 사이의 위치

2) 후외 표기법(postfix notation)
- 연산자가 피연산자들 뒤에 위치

ex) A + B * C - 중위 == ABC * + - 후위
	A * B + C == AB * C
	A + B + C == AB+C+
	(A + B) * C == AB + C *
	A * (B + C) == ABC +*
-> 연산자 우선순위에 맞게 위치.

연산자 우선 순위

prec = {
	'*' : 3, '/' : 3,
	'+' : 2, '-' : 2,
	'(' : 1
}

예제 1
중위 표현식 -> 후위 표현식 알고리즘 설계(if 중첩으로 모든게 설명이 된다)
1) 피연산자이면 그냥 출력
2) '('이면 스택에 push
3) ')' 이면 '('이 나올때 까지 스택에서 pop, 출력
4) 연산자이면 스택에서 이보다 높(거나 같)은 우선순위 것들을 pop, 출력
그리고 이 연산자는 스택에 push
5) 스택에 남아 있는 연산자는 모두 pop, 출력.

HINT
스택의 맨위에 있는 연산자와의 우선순위 비교 - peek() 이용해
스택에 남아 있는 연산자는 모두 pop()하는 순환문 - while

예제 2 
후위 표현식 계산.