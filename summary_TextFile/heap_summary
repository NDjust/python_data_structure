Heap
= Binary Heap(이진트리의 한 종류)

조건
1. 루트노드가 언제나 최대값 or 최솟값을 가짐
	> 최대힙, 최소힙

2. 완전 이진 트리여야 함.

재귀 정의 가능 
- 어느 노드를 루트로 하는 서브트리도 모두 최대 힘.

느슨한 정렬의 구조.

이진 탐색 트리와의 비교

1. 원소들은 완전히 크기 순으로 정렬되어 있는가? 
-> 이진 탐색 o , 힙 x
2. 특정 키 값을 가지는 원소를 빠르게 검색할 수 있는가?
-> 이진 탐색 o, 힙 x
3. 부가의 제약 조건은 어떤 것인가?
-> 힙은 완전 이진 트리여야 한다는 제약 조건이 있다.

최대힙의 추상적 자료구조

연산 정의
__init__() - 빈 최대 힙을 생성
insert(item) - 새로운 원소를 삽입
remove() - 최대 원소(root node)를 반환 & 삭제.
# 힙은 traversal이 부적절한 자료구조 이기때문에 연산 정의 x.

배열을 이용한 이진 트리의 표현.

노드 번호 m을 기준 
- 왼쪽 자식의 번호 : 2 * m
- 오론쪽 자식의 번호 : 2 * m + 1
- 부모 노드의 번호 : m // 2

완전 이진 트리이므로
- 노드의 추가/삭제는 마지막 노드에서만.

최대 힙에 원소 삽입 
1. 트리의 마지막 자리에 새로운 원소를 임시로 저장
2. 부모노드와 키 값을 비교하여 위로, 위로, 이동
+ 복잡도 : 원소의 개수가 n인 최대 힙에 새로운 원소 삽입 
- 부모 노드와의 대소 비교 최대 회수 : log2 n
- 최약 복잡도 O(log n)

최대 힙에서 원소의 삭제는
1. 루트 노드의 제거 - 이것이 원소들 중 최대값.
2. 트리 마지막 자리 노드를 임시로 루트 노드의 자리에 배치 (완전 이진 트리 만족)
3. 자식 노드들과의 값 비교와 아래로, 아래로 이동
	> 자식은 둘 있을 수도 있는데, 어느 쪽으로 이동?

+ 시간 복잡도 - 자식 노드들과의 대소 비교 최대 회수 : 2 x log2 n
최악 복잡도 O(log n)의 삭제 연산.

maxHeapify - recursive 하게.

최대 / 최소 힙의 응용

1. 우선 순위 큐
- enqueue 할때 '느슨한 정렬'을 이루고 있도록 함 : O(log n)
- dequeue 할때 최댓값을 순서대로 추출 : O(log n)
- 양방형 연결 리스트 이용 구현과 효율성 비교

2. 힙정렬
- 정렬되지 않은 원소들을 아무 순서로나 최대 힘에 삽입 : O(log n)
- 삽입이 끝나면, 힙이 비게 될 때까지 하니씩 삭제 : o(log n)
- 원소들이 삭제된 순서가 원소들의 정렬 순서
- 정렬 알고리즘의 복잡도 : O(nlog n)


