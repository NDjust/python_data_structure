트리

정점(node)과 간선(edge)을 이용하여 데이터이 배치 형태를 추상화한 자료 구조

(위)root - internal(중간) - (아래)leaf

부모 노드(root or internal)와 자식 노드(internal or leaf).

같은 부모 아래 같은 자식노드 (sibling)

부모의 부모(의 부모의..) - ancestor
자식의 자식(의 자식의..) - descendant

노드의 수준(Level)
거치는 간선의 수랑 노드의 수준과 일치시키기 위해 0으로 시작
root - level 0 
root 자식 노드 - level 1
root 자식의 자식 - level 2
...
...
...

트리의 높이(Height)
트리의 높이 = 최대 수준 + 1
* 깊이라고도 함.(depth)

부분 트리 (subtree)

노드의 차수 (degree)
= 자식(서브트리)의 수 = 자식 간선의 개수
* 각 노드의 parent는 무조건 하나.
leaf nodes는 degree는 0


binary tree
- 모든 노드의 차수가 2 이하인 트리.
- 재귀적으로 정의 할 수 있음 -> 루트 노드 + 왼쪽 서브트리 + 오른쪽 서브트리
(단, 이때 왼쪽과 오른쪽 서브트리 또한 이진트리)
+ 빈트리도 이진 트리라는 조건을 추가해야함.(종료 조건)

Full binary Tree
- 모든 레벨에서 노드들이 모두 채워져 있는 이진 트리.
(높아기 k이고 노드의 개수가 2**k -1 인 이진 트리

Complete Binary Tree
- 높이 k인 완전 이진 트리
- 레벨 k - 2까지는 모든 노드가 2개의 자식을 가진 포화 이진 트리
- 레벨 k - 1에서는 왼쪽부터 노드가 순차적으로 채워져 있는 이진 트리


